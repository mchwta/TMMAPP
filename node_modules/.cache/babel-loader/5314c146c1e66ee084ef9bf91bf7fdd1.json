{"ast":null,"code":"import { __rest } from 'tslib';\nimport { createBrowserHistory, createHashHistory } from 'history';\nimport React from 'react';\nimport { matchPath as matchPath$1, withRouter, Router } from 'react-router-dom';\nimport { ViewStacks, generateId, IonRoute, ViewLifeCycleManager, StackContext, RouteManagerContext, getConfig, LocationHistory, NavManager } from '@ionic/react';\nimport { Route, matchPath, Router as Router$1 } from 'react-router';\nclass IonRouteInner extends React.PureComponent {\n  render() {\n    return React.createElement(Route, {\n      path: this.props.path,\n      exact: this.props.exact,\n      render: this.props.render,\n      computedMatch: this.props.computedMatch\n    });\n  }\n}\nclass ReactRouterViewStack extends ViewStacks {\n  constructor() {\n    super();\n    this.createViewItem = this.createViewItem.bind(this);\n    this.findViewItemByRouteInfo = this.findViewItemByRouteInfo.bind(this);\n    this.findLeavingViewItemByRouteInfo = this.findLeavingViewItemByRouteInfo.bind(this);\n    this.getChildrenToRender = this.getChildrenToRender.bind(this);\n    this.findViewItemByPathname = this.findViewItemByPathname.bind(this);\n  }\n  createViewItem(outletId, reactElement, routeInfo, page) {\n    const viewItem = {\n      id: generateId('viewItem'),\n      outletId,\n      ionPageElement: page,\n      reactElement,\n      mount: true,\n      ionRoute: false\n    };\n    const matchProps = {\n      exact: reactElement.props.exact,\n      path: reactElement.props.path || reactElement.props.from,\n      component: reactElement.props.component\n    };\n    const match = matchPath(routeInfo.pathname, matchProps);\n    if (reactElement.type === IonRoute) {\n      viewItem.ionRoute = true;\n      viewItem.disableIonPageManagement = reactElement.props.disableIonPageManagement;\n    }\n    viewItem.routeData = {\n      match,\n      childProps: reactElement.props\n    };\n    return viewItem;\n  }\n  getChildrenToRender(outletId, ionRouterOutlet, routeInfo) {\n    const viewItems = this.getViewItemsForOutlet(outletId);\n    // Sync latest routes with viewItems\n    React.Children.forEach(ionRouterOutlet.props.children, child => {\n      const viewItem = viewItems.find(v => {\n        return matchComponent$1(child, v.routeData.childProps.path || v.routeData.childProps.from);\n      });\n      if (viewItem) {\n        viewItem.reactElement = child;\n      }\n    });\n    const children = viewItems.map(viewItem => {\n      let clonedChild;\n      if (viewItem.ionRoute && !viewItem.disableIonPageManagement) {\n        clonedChild = React.createElement(ViewLifeCycleManager, {\n          key: `view-${viewItem.id}`,\n          mount: viewItem.mount,\n          removeView: () => this.remove(viewItem)\n        }, React.cloneElement(viewItem.reactElement, {\n          computedMatch: viewItem.routeData.match\n        }));\n      } else {\n        const match = matchComponent$1(viewItem.reactElement, routeInfo.pathname);\n        clonedChild = React.createElement(ViewLifeCycleManager, {\n          key: `view-${viewItem.id}`,\n          mount: viewItem.mount,\n          removeView: () => this.remove(viewItem)\n        }, React.cloneElement(viewItem.reactElement, {\n          computedMatch: viewItem.routeData.match\n        }));\n        if (!match && viewItem.routeData.match) {\n          viewItem.routeData.match = undefined;\n          viewItem.mount = false;\n        }\n      }\n      return clonedChild;\n    });\n    return children;\n  }\n  findViewItemByRouteInfo(routeInfo, outletId) {\n    const {\n      viewItem,\n      match\n    } = this.findViewItemByPath(routeInfo.pathname, outletId);\n    if (viewItem && match) {\n      viewItem.routeData.match = match;\n    }\n    return viewItem;\n  }\n  findLeavingViewItemByRouteInfo(routeInfo, outletId) {\n    let mustBeIonRoute = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const {\n      viewItem\n    } = this.findViewItemByPath(routeInfo.lastPathname, outletId, false, mustBeIonRoute);\n    return viewItem;\n  }\n  findViewItemByPathname(pathname, outletId) {\n    const {\n      viewItem\n    } = this.findViewItemByPath(pathname, outletId);\n    return viewItem;\n  }\n  findViewItemByPath(pathname, outletId, forceExact, mustBeIonRoute) {\n    let viewItem;\n    let match;\n    let viewStack;\n    if (outletId) {\n      viewStack = this.getViewItemsForOutlet(outletId);\n      viewStack.some(matchView);\n      if (!viewItem) {\n        viewStack.some(matchDefaultRoute);\n      }\n    } else {\n      const viewItems = this.getAllViewItems();\n      viewItems.some(matchView);\n      if (!viewItem) {\n        viewItems.some(matchDefaultRoute);\n      }\n    }\n    return {\n      viewItem,\n      match\n    };\n    function matchView(v) {\n      if (mustBeIonRoute && !v.ionRoute) {\n        return false;\n      }\n      const matchProps = {\n        exact: forceExact ? true : v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component\n      };\n      const myMatch = matchPath(pathname, matchProps);\n      if (myMatch) {\n        viewItem = v;\n        match = myMatch;\n        return true;\n      }\n      return false;\n    }\n    function matchDefaultRoute(v) {\n      // try to find a route that doesn't have a path or from prop, that will be our default route\n      if (!v.routeData.childProps.path && !v.routeData.childProps.from) {\n        match = {\n          path: pathname,\n          url: pathname,\n          isExact: true,\n          params: {}\n        };\n        viewItem = v;\n        return true;\n      }\n      return false;\n    }\n  }\n}\nfunction matchComponent$1(node, pathname, forceExact) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component\n  };\n  const match = matchPath(pathname, matchProps);\n  return match;\n}\nfunction clonePageElement(leavingViewHtml) {\n  let html;\n  if (typeof leavingViewHtml === 'string') {\n    html = leavingViewHtml;\n  } else {\n    html = leavingViewHtml.outerHTML;\n  }\n  if (document) {\n    const newEl = document.createElement('div');\n    newEl.innerHTML = html;\n    newEl.style.zIndex = '';\n    // Remove an existing back button so the new element doesn't get two of them\n    const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n    if (ionBackButton[0]) {\n      ionBackButton[0].remove();\n    }\n    return newEl.firstChild;\n  }\n  return undefined;\n}\nclass StackManager extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.stackContextValue = {\n      registerIonPage: this.registerIonPage.bind(this),\n      isInOutlet: () => true\n    };\n    this.registerIonPage = this.registerIonPage.bind(this);\n    this.transitionPage = this.transitionPage.bind(this);\n    this.handlePageTransition = this.handlePageTransition.bind(this);\n    this.id = generateId('routerOutlet');\n  }\n  componentDidMount() {\n    if (this.routerOutletElement) {\n      this.setupRouterOutlet(this.routerOutletElement);\n      // console.log(`SM Mount - ${this.routerOutletElement.id} (${this.id})`);\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.routeInfo.pathname !== prevProps.routeInfo.pathname) {\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n  componentWillUnmount() {\n    // console.log(`SM UNMount - ${(this.routerOutletElement?.id as any).id} (${this.id})`);\n    this.context.clearOutlet(this.id);\n  }\n  async handlePageTransition(routeInfo) {\n    var _a, _b;\n    // If routerOutlet isn't quite ready, give it another try in a moment\n    if (!this.routerOutletElement || !this.routerOutletElement.commit) {\n      setTimeout(() => this.handlePageTransition(routeInfo), 10);\n    } else {\n      let enteringViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n      let leavingViewItem = this.context.findLeavingViewItemByRouteInfo(routeInfo, this.id);\n      if (!leavingViewItem && routeInfo.prevRouteLastPathname) {\n        leavingViewItem = this.context.findViewItemByPathname(routeInfo.prevRouteLastPathname, this.id);\n      }\n      // Check if leavingViewItem should be unmounted\n      if (leavingViewItem) {\n        if (routeInfo.routeAction === 'replace') {\n          leavingViewItem.mount = false;\n        } else if (!(routeInfo.routeAction === 'push' && routeInfo.routeDirection === 'forward')) {\n          if (routeInfo.routeDirection !== 'none' && enteringViewItem !== leavingViewItem) {\n            leavingViewItem.mount = false;\n          }\n        } else if ((_a = routeInfo.routeOptions) === null || _a === void 0 ? void 0 : _a.unmount) {\n          leavingViewItem.mount = false;\n        }\n      }\n      const enteringRoute = matchRoute((_b = this.ionRouterOutlet) === null || _b === void 0 ? void 0 : _b.props.children, routeInfo);\n      if (enteringViewItem) {\n        enteringViewItem.reactElement = enteringRoute;\n      }\n      if (!enteringViewItem) {\n        if (enteringRoute) {\n          enteringViewItem = this.context.createViewItem(this.id, enteringRoute, routeInfo);\n          this.context.addViewItem(enteringViewItem);\n        }\n      }\n      if (enteringViewItem && enteringViewItem.ionPageElement) {\n        this.transitionPage(routeInfo, enteringViewItem, leavingViewItem);\n      } else if (leavingViewItem && !enteringRoute && !enteringViewItem) {\n        // If we have a leavingView but no entering view/route, we are probably leaving to\n        // another outlet, so hide this leavingView. We do it in a timeout to give time for a\n        // transition to finish.\n        // setTimeout(() => {\n        if (leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n        // }, 250);\n      }\n\n      this.forceUpdate();\n    }\n  }\n  registerIonPage(page, routeInfo) {\n    const foundView = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n    if (foundView) {\n      foundView.ionPageElement = page;\n      foundView.ionRoute = true;\n    }\n    this.handlePageTransition(routeInfo);\n  }\n  async setupRouterOutlet(routerOutlet) {\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n      if (swipeEnabled) {\n        return this.context.canGoBack();\n      } else {\n        return false;\n      }\n    };\n    const onStart = () => {\n      this.context.goBack();\n    };\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd: _shouldContinue => true\n    };\n  }\n  async transitionPage(routeInfo, enteringViewItem, leavingViewItem) {\n    const routerOutlet = this.routerOutletElement;\n    const direction = routeInfo.routeDirection === 'none' || routeInfo.routeDirection === 'root' ? undefined : routeInfo.routeDirection;\n    if (enteringViewItem && enteringViewItem.ionPageElement && this.routerOutletElement) {\n      if (leavingViewItem && leavingViewItem.ionPageElement && enteringViewItem === leavingViewItem) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n        const match = matchComponent(leavingViewItem.reactElement, routeInfo.pathname, true);\n        if (match) {\n          const newLeavingElement = clonePageElement(leavingViewItem.ionPageElement.outerHTML);\n          if (newLeavingElement) {\n            this.routerOutletElement.appendChild(newLeavingElement);\n            await runCommit(enteringViewItem.ionPageElement, newLeavingElement);\n            this.routerOutletElement.removeChild(newLeavingElement);\n          }\n        } else {\n          await runCommit(enteringViewItem.ionPageElement, undefined);\n        }\n      } else {\n        await runCommit(enteringViewItem.ionPageElement, leavingViewItem === null || leavingViewItem === void 0 ? void 0 : leavingViewItem.ionPageElement);\n        if (leavingViewItem && leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n    async function runCommit(enteringEl, leavingEl) {\n      enteringEl.classList.add('ion-page');\n      enteringEl.classList.add('ion-page-invisible');\n      await routerOutlet.commit(enteringEl, leavingEl, {\n        deepWait: true,\n        duration: direction === undefined ? 0 : undefined,\n        direction: direction,\n        showGoBack: !!routeInfo.pushedByRoute,\n        progressAnimation: false,\n        animationBuilder: routeInfo.routeAnimation\n      });\n    }\n  }\n  render() {\n    const {\n      children\n    } = this.props;\n    const ionRouterOutlet = React.Children.only(children);\n    this.ionRouterOutlet = ionRouterOutlet;\n    const components = this.context.getChildrenToRender(this.id, this.ionRouterOutlet, this.props.routeInfo, () => {\n      this.forceUpdate();\n    });\n    return React.createElement(StackContext.Provider, {\n      value: this.stackContextValue\n    }, React.cloneElement(ionRouterOutlet, {\n      ref: node => {\n        if (ionRouterOutlet.props.setRef) {\n          ionRouterOutlet.props.setRef(node);\n        }\n        if (ionRouterOutlet.props.forwardedRef) {\n          ionRouterOutlet.props.forwardedRef.current = node;\n        }\n        this.routerOutletElement = node;\n        const {\n          ref\n        } = ionRouterOutlet;\n        if (typeof ref === 'function') {\n          ref(node);\n        }\n      }\n    }, components));\n  }\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\nfunction matchRoute(node, routeInfo) {\n  let matchedNode;\n  React.Children.forEach(node, child => {\n    const matchProps = {\n      exact: child.props.exact,\n      path: child.props.path || child.props.from,\n      component: child.props.component\n    };\n    const match = matchPath$1(routeInfo.pathname, matchProps);\n    if (match) {\n      matchedNode = child;\n    }\n  });\n  if (matchedNode) {\n    return matchedNode;\n  }\n  // If we haven't found a node\n  // try to find one that doesn't have a path or from prop, that will be our not found route\n  React.Children.forEach(node, child => {\n    if (!(child.props.path || child.props.from)) {\n      matchedNode = child;\n    }\n  });\n  return matchedNode;\n}\nfunction matchComponent(node, pathname, forceExact) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component\n  };\n  const match = matchPath$1(pathname, matchProps);\n  return match;\n}\nclass IonRouterInner extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.exitViewFromOtherOutletHandlers = [];\n    this.locationHistory = new LocationHistory();\n    this.viewStack = new ReactRouterViewStack();\n    this.routeMangerContextState = {\n      canGoBack: () => this.locationHistory.canGoBack(),\n      clearOutlet: this.viewStack.clear,\n      findViewItemByPathname: this.viewStack.findViewItemByPathname,\n      getChildrenToRender: this.viewStack.getChildrenToRender,\n      goBack: () => this.handleNavigateBack(),\n      createViewItem: this.viewStack.createViewItem,\n      findViewItemByRouteInfo: this.viewStack.findViewItemByRouteInfo,\n      findLeavingViewItemByRouteInfo: this.viewStack.findLeavingViewItemByRouteInfo,\n      addViewItem: this.viewStack.add,\n      unMountViewItem: this.viewStack.remove\n    };\n    const routeInfo = {\n      id: generateId('routeInfo'),\n      pathname: this.props.location.pathname,\n      search: this.props.location.search\n    };\n    this.locationHistory.add(routeInfo);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n    this.handleResetTab = this.handleResetTab.bind(this);\n    this.handleNativeBack = this.handleNativeBack.bind(this);\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.handleNavigateBack = this.handleNavigateBack.bind(this);\n    this.props.registerHistoryListener(this.handleHistoryChange.bind(this));\n    this.handleSetCurrentTab = this.handleSetCurrentTab.bind(this);\n    this.state = {\n      routeInfo\n    };\n  }\n  handleChangeTab(tab, path, routeOptions) {\n    if (!path) {\n      return;\n    }\n    const routeInfo = this.locationHistory.getCurrentRouteInfoForTab(tab);\n    const [pathname, search] = path.split('?');\n    if (routeInfo) {\n      this.incomingRouteParams = Object.assign(Object.assign({}, routeInfo), {\n        routeAction: 'push',\n        routeDirection: 'none'\n      });\n      if (routeInfo.pathname === pathname) {\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(routeInfo.pathname + (routeInfo.search || ''));\n      } else {\n        this.incomingRouteParams.pathname = pathname;\n        this.incomingRouteParams.search = search ? '?' + search : undefined;\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(pathname + (search ? '?' + search : ''));\n      }\n    } else {\n      this.handleNavigate(pathname, 'push', 'none', undefined, routeOptions, tab);\n    }\n  }\n  handleHistoryChange(location, action) {\n    var _a, _b, _c;\n    let leavingLocationInfo;\n    if (this.incomingRouteParams) {\n      if (this.incomingRouteParams.routeAction === 'replace') {\n        leavingLocationInfo = this.locationHistory.previous();\n      } else {\n        leavingLocationInfo = this.locationHistory.current();\n      }\n    } else {\n      leavingLocationInfo = this.locationHistory.current();\n    }\n    const leavingUrl = leavingLocationInfo.pathname + leavingLocationInfo.search;\n    if (leavingUrl !== location.pathname) {\n      if (!this.incomingRouteParams) {\n        if (action === 'REPLACE') {\n          this.incomingRouteParams = {\n            routeAction: 'replace',\n            routeDirection: 'none',\n            tab: this.currentTab\n          };\n        }\n        if (action === 'POP') {\n          const currentRoute = this.locationHistory.current();\n          if (currentRoute && currentRoute.pushedByRoute) {\n            const prevInfo = this.locationHistory.findLastLocation(currentRoute);\n            this.incomingRouteParams = Object.assign(Object.assign({}, prevInfo), {\n              routeAction: 'pop',\n              routeDirection: 'back'\n            });\n          } else {\n            this.incomingRouteParams = {\n              routeAction: 'pop',\n              routeDirection: 'none',\n              tab: this.currentTab\n            };\n          }\n        }\n        if (!this.incomingRouteParams) {\n          this.incomingRouteParams = {\n            routeAction: 'push',\n            routeDirection: ((_a = location.state) === null || _a === void 0 ? void 0 : _a.direction) || 'forward',\n            routeOptions: (_b = location.state) === null || _b === void 0 ? void 0 : _b.routerOptions,\n            tab: this.currentTab\n          };\n        }\n      }\n      let routeInfo;\n      if ((_c = this.incomingRouteParams) === null || _c === void 0 ? void 0 : _c.id) {\n        routeInfo = Object.assign(Object.assign({}, this.incomingRouteParams), {\n          lastPathname: leavingLocationInfo.pathname\n        });\n        this.locationHistory.add(routeInfo);\n      } else {\n        const isPushed = this.incomingRouteParams.routeAction === 'push' && this.incomingRouteParams.routeDirection === 'forward';\n        routeInfo = Object.assign(Object.assign({\n          id: generateId('routeInfo')\n        }, this.incomingRouteParams), {\n          lastPathname: leavingLocationInfo.pathname,\n          pathname: location.pathname,\n          search: location.search,\n          params: this.props.match.params,\n          prevRouteLastPathname: leavingLocationInfo.lastPathname\n        });\n        if (isPushed) {\n          routeInfo.tab = leavingLocationInfo.tab;\n          routeInfo.pushedByRoute = leavingLocationInfo.pathname;\n        } else if (routeInfo.routeAction === 'pop') {\n          const r = this.locationHistory.findLastLocation(routeInfo);\n          routeInfo.pushedByRoute = r === null || r === void 0 ? void 0 : r.pushedByRoute;\n        } else if (routeInfo.routeAction === 'push' && routeInfo.tab !== leavingLocationInfo.tab) {\n          // If we are switching tabs grab the last route info for the tab and use its pushedByRoute\n          const lastRoute = this.locationHistory.getCurrentRouteInfoForTab(routeInfo.tab);\n          routeInfo.pushedByRoute = lastRoute === null || lastRoute === void 0 ? void 0 : lastRoute.pushedByRoute;\n        } else if (routeInfo.routeAction === 'replace') {\n          // Make sure to set the lastPathname, etc.. to the current route so the page transitions out\n          const currentRouteInfo = this.locationHistory.current();\n          /**\n           * If going from /home to /child, then replacing from\n           * /child to /home, we don't want the route info to\n           * say that /home was pushed by /home which is not correct.\n           */\n          const currentPushedBy = currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.pushedByRoute;\n          const pushedByRoute = currentPushedBy !== undefined && currentPushedBy !== routeInfo.pathname ? currentPushedBy : routeInfo.pushedByRoute;\n          routeInfo.lastPathname = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.pathname) || routeInfo.lastPathname;\n          routeInfo.prevRouteLastPathname = currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.lastPathname;\n          routeInfo.pushedByRoute = pushedByRoute;\n          routeInfo.routeDirection = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.routeDirection) || routeInfo.routeDirection;\n          routeInfo.routeAnimation = (currentRouteInfo === null || currentRouteInfo === void 0 ? void 0 : currentRouteInfo.routeAnimation) || routeInfo.routeAnimation;\n        }\n        this.locationHistory.add(routeInfo);\n      }\n      this.setState({\n        routeInfo\n      });\n    }\n    this.incomingRouteParams = undefined;\n  }\n  /**\n   * history@4.x uses goBack(), history@5.x uses back()\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just\n   * assume back() is available.\n   */\n  handleNativeBack() {\n    const history = this.props.history;\n    const goBack = history.goBack || history.back;\n    goBack();\n  }\n  handleNavigate(path, routeAction, routeDirection, routeAnimation, routeOptions, tab) {\n    this.incomingRouteParams = Object.assign(this.incomingRouteParams || {}, {\n      routeAction,\n      routeDirection,\n      routeOptions,\n      routeAnimation,\n      tab\n    });\n    if (routeAction === 'push') {\n      this.props.history.push(path);\n    } else {\n      this.props.history.replace(path);\n    }\n  }\n  handleNavigateBack() {\n    let defaultHref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n    let routeAnimation = arguments.length > 1 ? arguments[1] : undefined;\n    const config = getConfig();\n    defaultHref = defaultHref ? defaultHref : config && config.get('backButtonDefaultHref');\n    const routeInfo = this.locationHistory.current();\n    if (routeInfo && routeInfo.pushedByRoute) {\n      const prevInfo = this.locationHistory.findLastLocation(routeInfo);\n      if (prevInfo) {\n        this.incomingRouteParams = Object.assign(Object.assign({}, prevInfo), {\n          routeAction: 'pop',\n          routeDirection: 'back',\n          routeAnimation: routeAnimation || routeInfo.routeAnimation\n        });\n        if (routeInfo.lastPathname === routeInfo.pushedByRoute ||\n        /**\n         * We need to exclude tab switches/tab\n         * context changes here because tabbed\n         * navigation is not linear, but router.back()\n         * will go back in a linear fashion.\n         */\n        prevInfo.pathname === routeInfo.pushedByRoute && routeInfo.tab === '' && prevInfo.tab === '') {\n          /**\n           * history@4.x uses goBack(), history@5.x uses back()\n           * TODO: If support for React Router <=5 is dropped\n           * this logic is no longer needed. We can just\n           * assume back() is available.\n           */\n          const history = this.props.history;\n          const goBack = history.goBack || history.back;\n          goBack();\n        } else {\n          this.handleNavigate(prevInfo.pathname + (prevInfo.search || ''), 'pop', 'back');\n        }\n      } else {\n        this.handleNavigate(defaultHref, 'pop', 'back');\n      }\n    } else {\n      this.handleNavigate(defaultHref, 'pop', 'back');\n    }\n  }\n  handleResetTab(tab, originalHref, originalRouteOptions) {\n    const routeInfo = this.locationHistory.getFirstRouteInfoForTab(tab);\n    if (routeInfo) {\n      const newRouteInfo = Object.assign({}, routeInfo);\n      newRouteInfo.pathname = originalHref;\n      newRouteInfo.routeOptions = originalRouteOptions;\n      this.incomingRouteParams = Object.assign(Object.assign({}, newRouteInfo), {\n        routeAction: 'pop',\n        routeDirection: 'back'\n      });\n      this.props.history.push(newRouteInfo.pathname + (newRouteInfo.search || ''));\n    }\n  }\n  handleSetCurrentTab(tab) {\n    this.currentTab = tab;\n    const ri = Object.assign({}, this.locationHistory.current());\n    if (ri.tab !== tab) {\n      ri.tab = tab;\n      this.locationHistory.update(ri);\n    }\n  }\n  render() {\n    return React.createElement(RouteManagerContext.Provider, {\n      value: this.routeMangerContextState\n    }, React.createElement(NavManager, {\n      ionRoute: IonRouteInner,\n      ionRedirect: {},\n      stackManager: StackManager,\n      routeInfo: this.state.routeInfo,\n      onNativeBack: this.handleNativeBack,\n      onNavigateBack: this.handleNavigateBack,\n      onNavigate: this.handleNavigate,\n      onSetCurrentTab: this.handleSetCurrentTab,\n      onChangeTab: this.handleChangeTab,\n      onResetTab: this.handleResetTab,\n      locationHistory: this.locationHistory\n    }, this.props.children));\n  }\n}\nconst IonRouter = withRouter(IonRouterInner);\nIonRouter.displayName = 'IonRouter';\nclass IonReactRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n        history\n      } = props,\n      rest = __rest(props, [\"history\"]);\n    this.history = history || createBrowserHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router, Object.assign({\n      history: this.history\n    }, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nclass IonReactMemoryRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.history = props.history;\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router$1, Object.assign({}, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nclass IonReactHashRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n        history\n      } = props,\n      rest = __rest(props, [\"history\"]);\n    this.history = history || createHashHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location, action) {\n    const locationValue = location.location || location;\n    const actionValue = location.action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n  registerHistoryListener(cb) {\n    this.historyListenHandler = cb;\n  }\n  render() {\n    const _a = this.props,\n      {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    return React.createElement(Router, Object.assign({\n      history: this.history\n    }, props), React.createElement(IonRouter, {\n      registerHistoryListener: this.registerHistoryListener\n    }, children));\n  }\n}\nexport { IonReactHashRouter, IonReactMemoryRouter, IonReactRouter };","map":{"version":3,"names":["IonRouteInner","React","PureComponent","render","createElement","Route","path","props","exact","computedMatch","ReactRouterViewStack","ViewStacks","constructor","createViewItem","bind","findViewItemByRouteInfo","findLeavingViewItemByRouteInfo","getChildrenToRender","findViewItemByPathname","outletId","reactElement","routeInfo","page","viewItem","id","generateId","ionPageElement","mount","ionRoute","matchProps","from","component","match","matchPath","pathname","type","IonRoute","disableIonPageManagement","routeData","childProps","ionRouterOutlet","viewItems","getViewItemsForOutlet","Children","forEach","children","child","find","v","matchComponent$1","map","clonedChild","ViewLifeCycleManager","key","removeView","remove","cloneElement","undefined","findViewItemByPath","mustBeIonRoute","arguments","length","lastPathname","forceExact","viewStack","some","matchView","matchDefaultRoute","getAllViewItems","myMatch","url","isExact","params","matchComponent","node","clonePageElement","leavingViewHtml","html","outerHTML","document","newEl","innerHTML","style","zIndex","ionBackButton","getElementsByTagName","firstChild","StackManager","stackContextValue","registerIonPage","isInOutlet","transitionPage","handlePageTransition","componentDidMount","routerOutletElement","setupRouterOutlet","componentDidUpdate","prevProps","componentWillUnmount","context","clearOutlet","commit","setTimeout","enteringViewItem","leavingViewItem","prevRouteLastPathname","routeAction","routeDirection","_a","routeOptions","unmount","enteringRoute","matchRoute","_b","addViewItem","classList","add","setAttribute","forceUpdate","foundView","routerOutlet","canStart","config","getConfig","swipeEnabled","get","mode","canGoBack","onStart","goBack","swipeHandler","onEnd","_shouldContinue","direction","newLeavingElement","appendChild","runCommit","removeChild","enteringEl","leavingEl","deepWait","duration","showGoBack","pushedByRoute","progressAnimation","animationBuilder","routeAnimation","only","components","StackContext","Provider","value","ref","setRef","forwardedRef","current","contextType","RouteManagerContext","matchedNode","matchPath$1","IonRouterInner","exitViewFromOtherOutletHandlers","locationHistory","LocationHistory","routeMangerContextState","clear","handleNavigateBack","unMountViewItem","location","search","handleChangeTab","handleResetTab","handleNativeBack","handleNavigate","registerHistoryListener","handleHistoryChange","handleSetCurrentTab","state","tab","getCurrentRouteInfoForTab","split","incomingRouteParams","Object","assign","history","push","action","leavingLocationInfo","previous","leavingUrl","currentTab","currentRoute","prevInfo","findLastLocation","routerOptions","_c","isPushed","r","lastRoute","currentRouteInfo","currentPushedBy","setState","back","replace","defaultHref","originalHref","originalRouteOptions","getFirstRouteInfoForTab","newRouteInfo","ri","update","NavManager","ionRedirect","stackManager","onNativeBack","onNavigateBack","onNavigate","onSetCurrentTab","onChangeTab","onResetTab","IonRouter","withRouter","displayName","IonReactRouter","Component","rest","__rest","createBrowserHistory","listen","locationValue","actionValue","historyListenHandler","cb","Router","IonReactMemoryRouter","Router$1","IonReactHashRouter","createHashHistory"],"sources":["../src/ReactRouter/IonRouteInner.tsx","../src/ReactRouter/ReactRouterViewStack.tsx","../src/ReactRouter/clonePageElement.ts","../src/ReactRouter/StackManager.tsx","../src/ReactRouter/IonRouter.tsx","../src/ReactRouter/IonReactRouter.tsx","../src/ReactRouter/IonReactMemoryRouter.tsx","../src/ReactRouter/IonReactHashRouter.tsx"],"sourcesContent":["import { IonRouteProps } from '@ionic/react';\nimport React from 'react';\nimport { Route } from 'react-router';\n\nexport class IonRouteInner extends React.PureComponent<IonRouteProps> {\n  render() {\n    return (\n      <Route\n        path={this.props.path}\n        exact={this.props.exact}\n        render={this.props.render}\n        computedMatch={(this.props as any).computedMatch}\n      />\n    );\n  }\n}\n","import {\n  IonRoute,\n  RouteInfo,\n  ViewItem,\n  ViewLifeCycleManager,\n  ViewStacks,\n  generateId,\n} from '@ionic/react';\nimport React from 'react';\nimport { matchPath } from 'react-router';\n\nexport class ReactRouterViewStack extends ViewStacks {\n  constructor() {\n    super();\n    this.createViewItem = this.createViewItem.bind(this);\n    this.findViewItemByRouteInfo = this.findViewItemByRouteInfo.bind(this);\n    this.findLeavingViewItemByRouteInfo = this.findLeavingViewItemByRouteInfo.bind(this);\n    this.getChildrenToRender = this.getChildrenToRender.bind(this);\n    this.findViewItemByPathname = this.findViewItemByPathname.bind(this);\n  }\n\n  createViewItem(\n    outletId: string,\n    reactElement: React.ReactElement,\n    routeInfo: RouteInfo,\n    page?: HTMLElement\n  ) {\n    const viewItem: ViewItem = {\n      id: generateId('viewItem'),\n      outletId,\n      ionPageElement: page,\n      reactElement,\n      mount: true,\n      ionRoute: false,\n    };\n\n    const matchProps = {\n      exact: reactElement.props.exact,\n      path: reactElement.props.path || reactElement.props.from,\n      component: reactElement.props.component,\n    };\n\n    const match = matchPath(routeInfo.pathname, matchProps);\n\n    if (reactElement.type === IonRoute) {\n      viewItem.ionRoute = true;\n      viewItem.disableIonPageManagement = reactElement.props.disableIonPageManagement;\n    }\n\n    viewItem.routeData = {\n      match,\n      childProps: reactElement.props,\n    };\n\n    return viewItem;\n  }\n\n  getChildrenToRender(outletId: string, ionRouterOutlet: React.ReactElement, routeInfo: RouteInfo) {\n    const viewItems = this.getViewItemsForOutlet(outletId);\n\n    // Sync latest routes with viewItems\n    React.Children.forEach(ionRouterOutlet.props.children, (child: React.ReactElement) => {\n      const viewItem = viewItems.find((v) => {\n        return matchComponent(child, v.routeData.childProps.path || v.routeData.childProps.from);\n      });\n      if (viewItem) {\n        viewItem.reactElement = child;\n      }\n    });\n\n    const children = viewItems.map((viewItem) => {\n      let clonedChild;\n      if (viewItem.ionRoute && !viewItem.disableIonPageManagement) {\n        clonedChild = (\n          <ViewLifeCycleManager\n            key={`view-${viewItem.id}`}\n            mount={viewItem.mount}\n            removeView={() => this.remove(viewItem)}\n          >\n            {React.cloneElement(viewItem.reactElement, {\n              computedMatch: viewItem.routeData.match,\n            })}\n          </ViewLifeCycleManager>\n        );\n      } else {\n        const match = matchComponent(viewItem.reactElement, routeInfo.pathname);\n        clonedChild = (\n          <ViewLifeCycleManager\n            key={`view-${viewItem.id}`}\n            mount={viewItem.mount}\n            removeView={() => this.remove(viewItem)}\n          >\n            {React.cloneElement(viewItem.reactElement, {\n              computedMatch: viewItem.routeData.match,\n            })}\n          </ViewLifeCycleManager>\n        );\n\n        if (!match && viewItem.routeData.match) {\n          viewItem.routeData.match = undefined;\n          viewItem.mount = false;\n        }\n      }\n\n      return clonedChild;\n    });\n    return children;\n  }\n\n  findViewItemByRouteInfo(routeInfo: RouteInfo, outletId?: string) {\n    const { viewItem, match } = this.findViewItemByPath(routeInfo.pathname, outletId);\n    if (viewItem && match) {\n      viewItem.routeData.match = match;\n    }\n    return viewItem;\n  }\n\n  findLeavingViewItemByRouteInfo(routeInfo: RouteInfo, outletId?: string, mustBeIonRoute = true) {\n    const { viewItem } = this.findViewItemByPath(\n      routeInfo.lastPathname!,\n      outletId,\n      false,\n      mustBeIonRoute\n    );\n    return viewItem;\n  }\n\n  findViewItemByPathname(pathname: string, outletId?: string) {\n    const { viewItem } = this.findViewItemByPath(pathname, outletId);\n    return viewItem;\n  }\n\n  private findViewItemByPath(\n    pathname: string,\n    outletId?: string,\n    forceExact?: boolean,\n    mustBeIonRoute?: boolean\n  ) {\n    let viewItem: ViewItem | undefined;\n    let match: ReturnType<typeof matchPath> | undefined;\n    let viewStack: ViewItem[];\n\n    if (outletId) {\n      viewStack = this.getViewItemsForOutlet(outletId);\n      viewStack.some(matchView);\n      if (!viewItem) {\n        viewStack.some(matchDefaultRoute);\n      }\n    } else {\n      const viewItems = this.getAllViewItems();\n      viewItems.some(matchView);\n      if (!viewItem) {\n        viewItems.some(matchDefaultRoute);\n      }\n    }\n\n    return { viewItem, match };\n\n    function matchView(v: ViewItem) {\n      if (mustBeIonRoute && !v.ionRoute) {\n        return false;\n      }\n      const matchProps = {\n        exact: forceExact ? true : v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component,\n      };\n      const myMatch = matchPath(pathname, matchProps);\n      if (myMatch) {\n        viewItem = v;\n        match = myMatch;\n        return true;\n      }\n      return false;\n    }\n\n    function matchDefaultRoute(v: ViewItem) {\n      // try to find a route that doesn't have a path or from prop, that will be our default route\n      if (!v.routeData.childProps.path && !v.routeData.childProps.from) {\n        match = {\n          path: pathname,\n          url: pathname,\n          isExact: true,\n          params: {},\n        };\n        viewItem = v;\n        return true;\n      }\n      return false;\n    }\n  }\n}\n\nfunction matchComponent(node: React.ReactElement, pathname: string, forceExact?: boolean) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component,\n  };\n  const match = matchPath(pathname, matchProps);\n\n  return match;\n}\n","export function clonePageElement(leavingViewHtml: string | HTMLElement) {\n  let html: string;\n  if (typeof leavingViewHtml === 'string') {\n    html = leavingViewHtml;\n  } else {\n    html = leavingViewHtml.outerHTML;\n  }\n  if (document) {\n    const newEl = document.createElement('div');\n    newEl.innerHTML = html;\n    newEl.style.zIndex = '';\n    // Remove an existing back button so the new element doesn't get two of them\n    const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n    if (ionBackButton[0]) {\n      ionBackButton[0].remove();\n    }\n    return newEl.firstChild as HTMLElement;\n  }\n  return undefined;\n}\n","import {\n  RouteInfo,\n  RouteManagerContext,\n  StackContext,\n  StackContextState,\n  ViewItem,\n  generateId,\n  getConfig,\n} from '@ionic/react';\nimport React from 'react';\nimport { matchPath } from 'react-router-dom';\n\nimport { clonePageElement } from './clonePageElement';\n\ninterface StackManagerProps {\n  routeInfo: RouteInfo;\n}\n\ninterface StackManagerState {}\n\nexport class StackManager extends React.PureComponent<StackManagerProps, StackManagerState> {\n  id: string;\n  context!: React.ContextType<typeof RouteManagerContext>;\n  ionRouterOutlet?: React.ReactElement;\n  routerOutletElement: HTMLIonRouterOutletElement | undefined;\n\n  stackContextValue: StackContextState = {\n    registerIonPage: this.registerIonPage.bind(this),\n    isInOutlet: () => true,\n  };\n\n  constructor(props: StackManagerProps) {\n    super(props);\n    this.registerIonPage = this.registerIonPage.bind(this);\n    this.transitionPage = this.transitionPage.bind(this);\n    this.handlePageTransition = this.handlePageTransition.bind(this);\n    this.id = generateId('routerOutlet');\n  }\n\n  componentDidMount() {\n    if (this.routerOutletElement) {\n      this.setupRouterOutlet(this.routerOutletElement);\n      // console.log(`SM Mount - ${this.routerOutletElement.id} (${this.id})`);\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n\n  componentDidUpdate(prevProps: StackManagerProps) {\n    if (this.props.routeInfo.pathname !== prevProps.routeInfo.pathname) {\n      this.handlePageTransition(this.props.routeInfo);\n    }\n  }\n\n  componentWillUnmount() {\n    // console.log(`SM UNMount - ${(this.routerOutletElement?.id as any).id} (${this.id})`);\n    this.context.clearOutlet(this.id);\n  }\n\n  async handlePageTransition(routeInfo: RouteInfo) {\n    // If routerOutlet isn't quite ready, give it another try in a moment\n    if (!this.routerOutletElement || !this.routerOutletElement.commit) {\n      setTimeout(() => this.handlePageTransition(routeInfo), 10);\n    } else {\n      let enteringViewItem = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n      let leavingViewItem = this.context.findLeavingViewItemByRouteInfo(routeInfo, this.id);\n\n      if (!leavingViewItem && routeInfo.prevRouteLastPathname) {\n        leavingViewItem = this.context.findViewItemByPathname(\n          routeInfo.prevRouteLastPathname,\n          this.id\n        );\n      }\n\n      // Check if leavingViewItem should be unmounted\n      if (leavingViewItem) {\n        if (routeInfo.routeAction === 'replace') {\n          leavingViewItem.mount = false;\n        } else if (!(routeInfo.routeAction === 'push' && routeInfo.routeDirection === 'forward')) {\n          if (routeInfo.routeDirection !== 'none' && enteringViewItem !== leavingViewItem) {\n            leavingViewItem.mount = false;\n          }\n        } else if (routeInfo.routeOptions?.unmount) {\n          leavingViewItem.mount = false;\n        }\n      }\n\n      const enteringRoute = matchRoute(\n        this.ionRouterOutlet?.props.children,\n        routeInfo\n      ) as React.ReactElement;\n      if (enteringViewItem) {\n        enteringViewItem.reactElement = enteringRoute;\n      }\n      if (!enteringViewItem) {\n        if (enteringRoute) {\n          enteringViewItem = this.context.createViewItem(this.id, enteringRoute, routeInfo);\n          this.context.addViewItem(enteringViewItem);\n        }\n      }\n      if (enteringViewItem && enteringViewItem.ionPageElement) {\n        this.transitionPage(routeInfo, enteringViewItem, leavingViewItem);\n      } else if (leavingViewItem && !enteringRoute && !enteringViewItem) {\n        // If we have a leavingView but no entering view/route, we are probably leaving to\n        // another outlet, so hide this leavingView. We do it in a timeout to give time for a\n        // transition to finish.\n        // setTimeout(() => {\n        if (leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n        // }, 250);\n      }\n\n      this.forceUpdate();\n    }\n  }\n\n  registerIonPage(page: HTMLElement, routeInfo: RouteInfo) {\n    const foundView = this.context.findViewItemByRouteInfo(routeInfo, this.id);\n    if (foundView) {\n      foundView.ionPageElement = page;\n      foundView.ionRoute = true;\n    }\n    this.handlePageTransition(routeInfo);\n  }\n\n  async setupRouterOutlet(routerOutlet: HTMLIonRouterOutletElement) {\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n      if (swipeEnabled) {\n        return this.context.canGoBack();\n      } else {\n        return false;\n      }\n    };\n\n    const onStart = () => {\n      this.context.goBack();\n    };\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd: (_shouldContinue) => true,\n    };\n  }\n\n  async transitionPage(\n    routeInfo: RouteInfo,\n    enteringViewItem: ViewItem,\n    leavingViewItem?: ViewItem\n  ) {\n    const routerOutlet = this.routerOutletElement!;\n\n    const direction =\n      routeInfo.routeDirection === 'none' || routeInfo.routeDirection === 'root'\n        ? undefined\n        : routeInfo.routeDirection;\n\n    if (enteringViewItem && enteringViewItem.ionPageElement && this.routerOutletElement) {\n      if (\n        leavingViewItem &&\n        leavingViewItem.ionPageElement &&\n        enteringViewItem === leavingViewItem\n      ) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n\n        const match = matchComponent(leavingViewItem.reactElement, routeInfo.pathname, true);\n        if (match) {\n          const newLeavingElement = clonePageElement(leavingViewItem.ionPageElement.outerHTML);\n          if (newLeavingElement) {\n            this.routerOutletElement.appendChild(newLeavingElement);\n            await runCommit(enteringViewItem.ionPageElement, newLeavingElement);\n            this.routerOutletElement.removeChild(newLeavingElement);\n          }\n        } else {\n          await runCommit(enteringViewItem.ionPageElement, undefined);\n        }\n      } else {\n        await runCommit(enteringViewItem.ionPageElement, leavingViewItem?.ionPageElement);\n        if (leavingViewItem && leavingViewItem.ionPageElement) {\n          leavingViewItem.ionPageElement.classList.add('ion-page-hidden');\n          leavingViewItem.ionPageElement.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n    async function runCommit(enteringEl: HTMLElement, leavingEl?: HTMLElement) {\n      enteringEl.classList.add('ion-page');\n      enteringEl.classList.add('ion-page-invisible');\n\n      await routerOutlet.commit(enteringEl, leavingEl, {\n        deepWait: true,\n        duration: direction === undefined ? 0 : undefined,\n        direction: direction as any,\n        showGoBack: !!routeInfo.pushedByRoute,\n        progressAnimation: false,\n        animationBuilder: routeInfo.routeAnimation,\n      });\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const ionRouterOutlet = React.Children.only(children) as React.ReactElement;\n    this.ionRouterOutlet = ionRouterOutlet;\n\n    const components = this.context.getChildrenToRender(\n      this.id,\n      this.ionRouterOutlet,\n      this.props.routeInfo,\n      () => {\n        this.forceUpdate();\n      }\n    );\n\n    return (\n      <StackContext.Provider value={this.stackContextValue}>\n        {React.cloneElement(\n          ionRouterOutlet as any,\n          {\n            ref: (node: HTMLIonRouterOutletElement) => {\n              if (ionRouterOutlet.props.setRef) {\n                ionRouterOutlet.props.setRef(node);\n              }\n              if (ionRouterOutlet.props.forwardedRef) {\n                ionRouterOutlet.props.forwardedRef.current = node;\n              }\n              this.routerOutletElement = node;\n              const { ref } = ionRouterOutlet as any;\n              if (typeof ref === 'function') {\n                ref(node);\n              }\n            },\n          },\n          components\n        )}\n      </StackContext.Provider>\n    );\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\n\nexport default StackManager;\n\nfunction matchRoute(node: React.ReactNode, routeInfo: RouteInfo) {\n  let matchedNode: React.ReactNode;\n  React.Children.forEach(node as React.ReactElement, (child: React.ReactElement) => {\n    const matchProps = {\n      exact: child.props.exact,\n      path: child.props.path || child.props.from,\n      component: child.props.component,\n    };\n    const match = matchPath(routeInfo.pathname, matchProps);\n    if (match) {\n      matchedNode = child;\n    }\n  });\n\n  if (matchedNode) {\n    return matchedNode;\n  }\n  // If we haven't found a node\n  // try to find one that doesn't have a path or from prop, that will be our not found route\n  React.Children.forEach(node as React.ReactElement, (child: React.ReactElement) => {\n    if (!(child.props.path || child.props.from)) {\n      matchedNode = child;\n    }\n  });\n\n  return matchedNode;\n}\n\nfunction matchComponent(node: React.ReactElement, pathname: string, forceExact?: boolean) {\n  const matchProps = {\n    exact: forceExact ? true : node.props.exact,\n    path: node.props.path || node.props.from,\n    component: node.props.component,\n  };\n  const match = matchPath(pathname, matchProps);\n\n  return match;\n}\n","import {\n  AnimationBuilder,\n  LocationHistory,\n  NavManager,\n  RouteAction,\n  RouteInfo,\n  RouteManagerContext,\n  RouteManagerContextState,\n  RouterDirection,\n  ViewItem,\n  generateId,\n  getConfig,\n} from '@ionic/react';\nimport { Action as HistoryAction, Location as HistoryLocation } from 'history';\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport { IonRouteInner } from './IonRouteInner';\nimport { ReactRouterViewStack } from './ReactRouterViewStack';\nimport StackManager from './StackManager';\n\nexport interface LocationState {\n  direction?: RouterDirection;\n  routerOptions?: { as?: string; unmount?: boolean };\n}\n\ninterface IonRouteProps extends RouteComponentProps<{}, {}, LocationState> {\n  registerHistoryListener: (\n    cb: (location: HistoryLocation<any>, action: HistoryAction) => void\n  ) => void;\n}\n\ninterface IonRouteState {\n  routeInfo: RouteInfo;\n}\n\nclass IonRouterInner extends React.PureComponent<IonRouteProps, IonRouteState> {\n  currentTab?: string;\n  exitViewFromOtherOutletHandlers: ((pathname: string) => ViewItem | undefined)[] = [];\n  incomingRouteParams?: Partial<RouteInfo>;\n  locationHistory = new LocationHistory();\n  viewStack = new ReactRouterViewStack();\n  routeMangerContextState: RouteManagerContextState = {\n    canGoBack: () => this.locationHistory.canGoBack(),\n    clearOutlet: this.viewStack.clear,\n    findViewItemByPathname: this.viewStack.findViewItemByPathname,\n    getChildrenToRender: this.viewStack.getChildrenToRender,\n    goBack: () => this.handleNavigateBack(),\n    createViewItem: this.viewStack.createViewItem,\n    findViewItemByRouteInfo: this.viewStack.findViewItemByRouteInfo,\n    findLeavingViewItemByRouteInfo: this.viewStack.findLeavingViewItemByRouteInfo,\n    addViewItem: this.viewStack.add,\n    unMountViewItem: this.viewStack.remove,\n  };\n\n  constructor(props: IonRouteProps) {\n    super(props);\n\n    const routeInfo = {\n      id: generateId('routeInfo'),\n      pathname: this.props.location.pathname,\n      search: this.props.location.search,\n    };\n\n    this.locationHistory.add(routeInfo);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n    this.handleResetTab = this.handleResetTab.bind(this);\n    this.handleNativeBack = this.handleNativeBack.bind(this);\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.handleNavigateBack = this.handleNavigateBack.bind(this);\n    this.props.registerHistoryListener(this.handleHistoryChange.bind(this));\n    this.handleSetCurrentTab = this.handleSetCurrentTab.bind(this);\n\n    this.state = {\n      routeInfo,\n    };\n  }\n\n  handleChangeTab(tab: string, path?: string, routeOptions?: any) {\n    if (!path) { return; }\n\n    const routeInfo = this.locationHistory.getCurrentRouteInfoForTab(tab);\n    const [pathname, search] = path.split('?');\n    if (routeInfo) {\n      this.incomingRouteParams = { ...routeInfo, routeAction: 'push', routeDirection: 'none' };\n      if (routeInfo.pathname === pathname) {\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(routeInfo.pathname + (routeInfo.search || ''));\n      } else {\n        this.incomingRouteParams.pathname = pathname;\n        this.incomingRouteParams.search = search ? '?' + search : undefined;\n        this.incomingRouteParams.routeOptions = routeOptions;\n        this.props.history.push(pathname + (search ? '?' + search : ''));\n      }\n    } else {\n      this.handleNavigate(pathname, 'push', 'none', undefined, routeOptions, tab);\n    }\n  }\n\n  handleHistoryChange(location: HistoryLocation<LocationState>, action: HistoryAction) {\n    let leavingLocationInfo: RouteInfo;\n    if (this.incomingRouteParams) {\n      if (this.incomingRouteParams.routeAction === 'replace') {\n        leavingLocationInfo = this.locationHistory.previous();\n      } else {\n        leavingLocationInfo = this.locationHistory.current();\n      }\n    } else {\n      leavingLocationInfo = this.locationHistory.current();\n    }\n\n    const leavingUrl = leavingLocationInfo.pathname + leavingLocationInfo.search;\n    if (leavingUrl !== location.pathname) {\n      if (!this.incomingRouteParams) {\n        if (action === 'REPLACE') {\n          this.incomingRouteParams = {\n            routeAction: 'replace',\n            routeDirection: 'none',\n            tab: this.currentTab, // TODO this isn't legit if replacing to a page that is not in the tabs\n          };\n        }\n        if (action === 'POP') {\n          const currentRoute = this.locationHistory.current();\n          if (currentRoute && currentRoute.pushedByRoute) {\n            const prevInfo = this.locationHistory.findLastLocation(currentRoute);\n            this.incomingRouteParams = { ...prevInfo, routeAction: 'pop', routeDirection: 'back' };\n          } else {\n            this.incomingRouteParams = {\n              routeAction: 'pop',\n              routeDirection: 'none',\n              tab: this.currentTab,\n            };\n          }\n        }\n        if (!this.incomingRouteParams) {\n          this.incomingRouteParams = {\n            routeAction: 'push',\n            routeDirection: location.state?.direction || 'forward',\n            routeOptions: location.state?.routerOptions,\n            tab: this.currentTab,\n          };\n        }\n      }\n\n      let routeInfo: RouteInfo;\n\n      if (this.incomingRouteParams?.id) {\n        routeInfo = {\n          ...(this.incomingRouteParams as RouteInfo),\n          lastPathname: leavingLocationInfo.pathname,\n        };\n        this.locationHistory.add(routeInfo);\n      } else {\n        const isPushed =\n          this.incomingRouteParams.routeAction === 'push' &&\n          this.incomingRouteParams.routeDirection === 'forward';\n        routeInfo = {\n          id: generateId('routeInfo'),\n          ...this.incomingRouteParams,\n          lastPathname: leavingLocationInfo.pathname,\n          pathname: location.pathname,\n          search: location.search,\n          params: this.props.match.params,\n          prevRouteLastPathname: leavingLocationInfo.lastPathname,\n        };\n        if (isPushed) {\n          routeInfo.tab = leavingLocationInfo.tab;\n          routeInfo.pushedByRoute = leavingLocationInfo.pathname;\n        } else if (routeInfo.routeAction === 'pop') {\n          const r = this.locationHistory.findLastLocation(routeInfo);\n          routeInfo.pushedByRoute = r?.pushedByRoute;\n        } else if (routeInfo.routeAction === 'push' && routeInfo.tab !== leavingLocationInfo.tab) {\n          // If we are switching tabs grab the last route info for the tab and use its pushedByRoute\n          const lastRoute = this.locationHistory.getCurrentRouteInfoForTab(routeInfo.tab);\n          routeInfo.pushedByRoute = lastRoute?.pushedByRoute;\n        } else if (routeInfo.routeAction === 'replace') {\n          // Make sure to set the lastPathname, etc.. to the current route so the page transitions out\n          const currentRouteInfo = this.locationHistory.current();\n\n          /**\n           * If going from /home to /child, then replacing from\n           * /child to /home, we don't want the route info to\n           * say that /home was pushed by /home which is not correct.\n           */\n          const currentPushedBy = currentRouteInfo?.pushedByRoute;\n          const pushedByRoute = (currentPushedBy !== undefined && currentPushedBy !== routeInfo.pathname) ? currentPushedBy : routeInfo.pushedByRoute;\n\n          routeInfo.lastPathname = currentRouteInfo?.pathname || routeInfo.lastPathname;\n          routeInfo.prevRouteLastPathname = currentRouteInfo?.lastPathname;\n          routeInfo.pushedByRoute = pushedByRoute;\n          routeInfo.routeDirection = currentRouteInfo?.routeDirection || routeInfo.routeDirection;\n          routeInfo.routeAnimation = currentRouteInfo?.routeAnimation || routeInfo.routeAnimation;\n        }\n\n        this.locationHistory.add(routeInfo);\n      }\n\n      this.setState({\n        routeInfo,\n      });\n    }\n\n    this.incomingRouteParams = undefined;\n  }\n\n  /**\n   * history@4.x uses goBack(), history@5.x uses back()\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just\n   * assume back() is available.\n   */\n  handleNativeBack() {\n    const history = this.props.history as any;\n    const goBack = history.goBack || history.back;\n    goBack();\n  }\n\n  handleNavigate(\n    path: string,\n    routeAction: RouteAction,\n    routeDirection?: RouterDirection,\n    routeAnimation?: AnimationBuilder,\n    routeOptions?: any,\n    tab?: string\n  ) {\n    this.incomingRouteParams = Object.assign(this.incomingRouteParams || {}, {\n      routeAction,\n      routeDirection,\n      routeOptions,\n      routeAnimation,\n      tab,\n    });\n\n    if (routeAction === 'push') {\n      this.props.history.push(path);\n    } else {\n      this.props.history.replace(path);\n    }\n  }\n\n  handleNavigateBack(defaultHref: string | RouteInfo = '/', routeAnimation?: AnimationBuilder) {\n    const config = getConfig();\n    defaultHref = defaultHref ? defaultHref : config && config.get('backButtonDefaultHref' as any);\n    const routeInfo = this.locationHistory.current();\n    if (routeInfo && routeInfo.pushedByRoute) {\n      const prevInfo = this.locationHistory.findLastLocation(routeInfo);\n      if (prevInfo) {\n        this.incomingRouteParams = {\n          ...prevInfo,\n          routeAction: 'pop',\n          routeDirection: 'back',\n          routeAnimation: routeAnimation || routeInfo.routeAnimation,\n        };\n        if (\n          routeInfo.lastPathname === routeInfo.pushedByRoute ||\n          (\n            /**\n             * We need to exclude tab switches/tab\n             * context changes here because tabbed\n             * navigation is not linear, but router.back()\n             * will go back in a linear fashion.\n             */\n            prevInfo.pathname === routeInfo.pushedByRoute &&\n            routeInfo.tab === '' && prevInfo.tab === ''\n          )\n        ) {\n          /**\n           * history@4.x uses goBack(), history@5.x uses back()\n           * TODO: If support for React Router <=5 is dropped\n           * this logic is no longer needed. We can just\n           * assume back() is available.\n           */\n          const history = this.props.history as any;\n          const goBack = history.goBack || history.back;\n          goBack();\n        } else {\n          this.handleNavigate(prevInfo.pathname + (prevInfo.search || ''), 'pop', 'back');\n        }\n      } else {\n        this.handleNavigate(defaultHref as string, 'pop', 'back');\n      }\n    } else {\n      this.handleNavigate(defaultHref as string, 'pop', 'back');\n    }\n  }\n\n  handleResetTab(tab: string, originalHref: string, originalRouteOptions: any) {\n    const routeInfo = this.locationHistory.getFirstRouteInfoForTab(tab);\n    if (routeInfo) {\n      const newRouteInfo = { ...routeInfo };\n      newRouteInfo.pathname = originalHref;\n      newRouteInfo.routeOptions = originalRouteOptions;\n      this.incomingRouteParams = { ...newRouteInfo, routeAction: 'pop', routeDirection: 'back' };\n      this.props.history.push(newRouteInfo.pathname + (newRouteInfo.search || ''));\n    }\n  }\n\n  handleSetCurrentTab(tab: string) {\n    this.currentTab = tab;\n    const ri = { ...this.locationHistory.current() };\n    if (ri.tab !== tab) {\n      ri.tab = tab;\n      this.locationHistory.update(ri);\n    }\n  }\n\n  render() {\n    return (\n      <RouteManagerContext.Provider value={this.routeMangerContextState}>\n        <NavManager\n          ionRoute={IonRouteInner}\n          ionRedirect={{}}\n          stackManager={StackManager}\n          routeInfo={this.state.routeInfo!}\n          onNativeBack={this.handleNativeBack}\n          onNavigateBack={this.handleNavigateBack}\n          onNavigate={this.handleNavigate}\n          onSetCurrentTab={this.handleSetCurrentTab}\n          onChangeTab={this.handleChangeTab}\n          onResetTab={this.handleResetTab}\n          locationHistory={this.locationHistory}\n        >\n          {this.props.children}\n        </NavManager>\n      </RouteManagerContext.Provider>\n    );\n  }\n}\n\nexport const IonRouter = withRouter(IonRouterInner);\nIonRouter.displayName = 'IonRouter';\n","import {\n  Action as HistoryAction,\n  History,\n  Location as HistoryLocation,\n  createBrowserHistory as createHistory,\n} from 'history';\nimport React from 'react';\nimport { BrowserRouterProps, Router } from 'react-router-dom';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactRouterProps extends BrowserRouterProps {\n  history?: History;\n}\n\nexport class IonReactRouter extends React.Component<IonReactRouterProps> {\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n  history: History;\n\n  constructor(props: IonReactRouterProps) {\n    super(props);\n    const { history, ...rest } = props;\n    this.history = history || createHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n /**\n  * history@4.x passes separate location and action\n  * params. history@5.x passes location and action\n  * together as a single object.\n  * TODO: If support for React Router <=5 is dropped\n  * this logic is no longer needed. We can just assume\n  * a single object with both location and action.\n  */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n   const locationValue = (location as any).location || location;\n   const actionValue = (location as any).action || action;\n   if (this.historyListenHandler) {\n     this.historyListenHandler(locationValue, actionValue);\n   }\n }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router history={this.history} {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n","import { Action as HistoryAction, Location as HistoryLocation, MemoryHistory } from 'history';\nimport React from 'react';\nimport { MemoryRouterProps, Router } from 'react-router';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactMemoryRouterProps extends MemoryRouterProps {\n  history: MemoryHistory;\n}\n\nexport class IonReactMemoryRouter extends React.Component<IonReactMemoryRouterProps> {\n  history: MemoryHistory;\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n\n  constructor(props: IonReactMemoryRouterProps) {\n    super(props);\n    this.history = props.history;\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    const locationValue = (location as any).location || location;\n    const actionValue = (location as any).action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n","import {\n  Action as HistoryAction,\n  History,\n  Location as HistoryLocation,\n  createHashHistory as createHistory,\n} from 'history';\nimport React from 'react';\nimport { BrowserRouterProps, Router } from 'react-router-dom';\n\nimport { IonRouter } from './IonRouter';\n\ninterface IonReactHashRouterProps extends BrowserRouterProps {\n  history?: History;\n}\n\nexport class IonReactHashRouter extends React.Component<IonReactHashRouterProps> {\n  history: History;\n  historyListenHandler?: (location: HistoryLocation, action: HistoryAction) => void;\n\n  constructor(props: IonReactHashRouterProps) {\n    super(props);\n    const { history, ...rest } = props;\n    this.history = history || createHistory(rest);\n    this.history.listen(this.handleHistoryChange.bind(this));\n    this.registerHistoryListener = this.registerHistoryListener.bind(this);\n  }\n\n  /**\n   * history@4.x passes separate location and action\n   * params. history@5.x passes location and action\n   * together as a single object.\n   * TODO: If support for React Router <=5 is dropped\n   * this logic is no longer needed. We can just assume\n   * a single object with both location and action.\n   */\n  handleHistoryChange(location: HistoryLocation, action: HistoryAction) {\n    const locationValue = (location as any).location || location;\n    const actionValue = (location as any).action || action;\n    if (this.historyListenHandler) {\n      this.historyListenHandler(locationValue, actionValue);\n    }\n  }\n\n  registerHistoryListener(cb: (location: HistoryLocation, action: HistoryAction) => void) {\n    this.historyListenHandler = cb;\n  }\n\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <Router history={this.history} {...props}>\n        <IonRouter registerHistoryListener={this.registerHistoryListener}>{children}</IonRouter>\n      </Router>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}