{"ast":null,"code":"import _slicedToArray from\"/Users/toy/Documents/APIU University Work/3rd Year/Mobile Dev/code/ionicproject1/DailyMoments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useState}from'react';import{auth as firebaseAuth}from'./firebase';// most components will use this,\n// if user is logged in and what is the userId\nexport var AuthContext=/*#__PURE__*/React.createContext({loggedIn:false});export function useAuth(){return useContext(AuthContext);}export function useAuthInit(){var _useState=useState({loading:true}),_useState2=_slicedToArray(_useState,2),authInit=_useState2[0],setAuthInit=_useState2[1];useEffect(function(){return firebaseAuth.onAuthStateChanged(function(firebaseUser){// setAuthInit({loading: false, auth: {loggedIn: Boolean(user)}});\nvar auth=firebaseUser?{loggedIn:true,userId:firebaseUser.uid}:{loggedIn:false};setAuthInit({loading:false,auth:auth});});},[]);// const [authState, setAuthInit] = useState<AuthInit>({loading: true});\n// useEffect(() => {\n//   return firebaseAuth.onAuthStateChanged((firebaseUser) => {\n//         const auth = firebaseUser ?\n//             {loggedIn: true, userId: firebaseUser.uid } :\n//             {loggedIn: false};\n//         setAuthInit({loading: false, auth});\n//   });\n// }, []);\nreturn authInit;}// export function useAuthInit(): AuthInit {\n//   const [authInit, setAuthInit] = useState<AuthInit>({ loading: true, loggedIn: false });\n//     useEffect(() => {\n//       firebaseAuth.onAuthStateChanged((user) => {\n//           setAuthInit({loading: false, loggedIn: Boolean(user)});\n//         });\n//       },[]);\n//   return authInit;\n// }","map":{"version":3,"sources":["/Users/toy/Documents/APIU University Work/3rd Year/Mobile Dev/code/ionicproject1/DailyMoments/src/auth.ts"],"names":["React","useContext","useEffect","useState","auth","firebaseAuth","AuthContext","createContext","loggedIn","useAuth","useAuthInit","loading","authInit","setAuthInit","onAuthStateChanged","firebaseUser","userId","uid"],"mappings":"oNAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,SAA5B,CAAuCC,QAAvC,KAAuD,OAAvD,CACA,OAASC,IAAI,GAAIC,CAAAA,YAAjB,KAAqC,YAArC,CAEA;AACA;AAYA,MAAO,IAAMC,CAAAA,WAAW,cAAGN,KAAK,CAACO,aAAN,CAA0B,CAACC,QAAQ,CAAC,KAAV,CAA1B,CAApB,CAEP,MAAO,SAASC,CAAAA,OAAT,EAAyB,CAC5B,MAAOR,CAAAA,UAAU,CAACK,WAAD,CAAjB,CACH,CAED,MAAO,SAASI,CAAAA,WAAT,EAAiC,CACtC,cAAgCP,QAAQ,CAAW,CAACQ,OAAO,CAAE,IAAV,CAAX,CAAxC,wCAAOC,QAAP,eAAiBC,WAAjB,eACAX,SAAS,CAAC,UAAM,CACd,MAAOG,CAAAA,YAAY,CAACS,kBAAb,CAAgC,SAACC,YAAD,CAAkB,CACrD;AACA,GAAMX,CAAAA,IAAI,CAAGW,YAAY,CACvB,CAAEP,QAAQ,CAAG,IAAb,CAAmBQ,MAAM,CAAED,YAAY,CAACE,GAAxC,CADuB,CAEvB,CAAET,QAAQ,CAAE,KAAZ,CAFF,CAGAK,WAAW,CAAC,CAAEF,OAAO,CAAE,KAAX,CAAkBP,IAAI,CAAJA,IAAlB,CAAD,CAAX,CACD,CANI,CAAP,CAOC,CARM,CAQL,EARK,CAAT,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAOQ,CAAAA,QAAP,CACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { auth as firebaseAuth } from './firebase'; \r\n\r\n// most components will use this,\r\n// if user is logged in and what is the userId\r\ninterface Auth {\r\n  loggedIn: boolean;\r\n  userId?: string; // ? is optional\r\n}\r\n\r\n// Only used by App to initialize the firebase authentication\r\ninterface AuthInit {\r\n  loading: boolean;\r\n  auth?: Auth;\r\n}\r\n\r\nexport const AuthContext = React.createContext<Auth>({loggedIn:false});\r\n\r\nexport function useAuth(): Auth {\r\n    return useContext(AuthContext);\r\n}\r\n\r\nexport function useAuthInit(): AuthInit {\r\n  const [authInit, setAuthInit] = useState<AuthInit>({loading: true});\r\n  useEffect(() => {\r\n    return firebaseAuth.onAuthStateChanged((firebaseUser) => {\r\n        // setAuthInit({loading: false, auth: {loggedIn: Boolean(user)}});\r\n        const auth = firebaseUser ?\r\n          { loggedIn:  true, userId: firebaseUser.uid} :\r\n          { loggedIn: false };\r\n        setAuthInit({ loading: false, auth});\r\n      });\r\n    },[]);\r\n\r\n  // const [authState, setAuthInit] = useState<AuthInit>({loading: true});\r\n  // useEffect(() => {\r\n  //   return firebaseAuth.onAuthStateChanged((firebaseUser) => {\r\n  //         const auth = firebaseUser ?\r\n  //             {loggedIn: true, userId: firebaseUser.uid } :\r\n  //             {loggedIn: false};\r\n  //         setAuthInit({loading: false, auth});\r\n  //   });\r\n  // }, []);\r\n  return authInit;\r\n}\r\n\r\n// export function useAuthInit(): AuthInit {\r\n//   const [authInit, setAuthInit] = useState<AuthInit>({ loading: true, loggedIn: false });\r\n//     useEffect(() => {\r\n//       firebaseAuth.onAuthStateChanged((user) => {\r\n//           setAuthInit({loading: false, loggedIn: Boolean(user)});\r\n//         });\r\n//       },[]);\r\n//   return authInit;\r\n// }\r\n\r\n"]},"metadata":{},"sourceType":"module"}