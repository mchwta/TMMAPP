{"ast":null,"code":"var _jsxFileName = \"/Users/hninwintthuaung/Desktop/School/TMMA App 3/src/pages/calendar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport { firestore } from '../firebase';\nimport { toEntry } from '../models';\nimport { useAuth } from '../auth';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport './calendarstyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarContainer = styled.div`\n  font-size: 0.8rem;\n`;\n_c = CalendarContainer;\nconst Calendar = () => {\n  _s();\n  const {\n    userId\n  } = useAuth();\n  const [entries, setEntries] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n  useEffect(() => {\n    const entriesRef = firestore.collection('users').doc(userId).collection('entries');\n\n    // Listen to changes in the collection and update the entries state\n    const unsubscribe = entriesRef.onSnapshot(_ref => {\n      let {\n        docs\n      } = _ref;\n      setEntries(docs.map(toEntry));\n      setLoading(false);\n    });\n    return unsubscribe; // Cleanup the listener when the component unmounts\n  }, [userId]);\n  const events = entries.map(entry => ({\n    title: entry.title,\n    date: new Date(entry.date),\n    id: entry.id,\n    classNames: entry.completed ? 'completed' : 'not-completed' // add classNames based on completion status\n  }));\n\n  const eventRender = info => {\n    if (info.event.extendedProps.completed) {\n      info.el.style.backgroundColor = 'blue'; // set blue background for completed tasks\n    } else {\n      info.el.style.backgroundColor = 'green'; // set green background for incomplete tasks\n    }\n  };\n\n  const handleEventClick = _ref2 => {\n    let {\n      event\n    } = _ref2;\n    history.push(`/my/entries/view/${event.id}`); // redirect to the corresponding entry page\n  };\n\n  const handleDateClick = arg => {\n    // filter the entries by the selected date and display them\n    const selectedEntries = entries.filter(entry => {\n      const entryDate = new Date(entry.date);\n      return entryDate.getFullYear() === arg.date.getFullYear() && entryDate.getMonth() === arg.date.getMonth() && entryDate.getDate() === arg.date.getDate();\n    });\n    console.log(selectedEntries);\n  };\n  return /*#__PURE__*/_jsxDEV(CalendarContainer, {\n    children: !loading && /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin],\n      initialView: \"dayGridMonth\",\n      events: events,\n      eventClick: handleEventClick,\n      dateClick: handleDateClick // attach the date click handler\n      ,\n      lazyFetching: true,\n      height: \"500px\",\n      eventRender: eventRender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"79ky0+wRV+GoCvG2gWqwbOBZ/CM=\", false, function () {\n  return [useAuth, useHistory];\n});\n_c2 = Calendar;\nexport default Calendar;\nvar _c, _c2;\n$RefreshReg$(_c, \"CalendarContainer\");\n$RefreshReg$(_c2, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","firestore","toEntry","useAuth","useHistory","styled","jsxDEV","_jsxDEV","CalendarContainer","div","_c","Calendar","_s","userId","entries","setEntries","loading","setLoading","history","entriesRef","collection","doc","unsubscribe","onSnapshot","_ref","docs","map","events","entry","title","date","Date","id","classNames","completed","eventRender","info","event","extendedProps","el","style","backgroundColor","handleEventClick","_ref2","push","handleDateClick","arg","selectedEntries","filter","entryDate","getFullYear","getMonth","getDate","console","log","children","plugins","initialView","eventClick","dateClick","lazyFetching","height","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/hninwintthuaung/Desktop/School/TMMA App 3/src/pages/calendar.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport { firestore } from '../firebase';\nimport { Entry, toEntry } from '../models';\nimport { useAuth } from '../auth';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport './calendarstyle.css';\n\nconst CalendarContainer = styled.div`\n  font-size: 0.8rem;\n`;\n\nconst Calendar: React.FC = () => {\n  const { userId } = useAuth();\n  const [entries, setEntries] = useState<Entry[]>([]);\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  useEffect(() => {\n    const entriesRef = firestore\n      .collection('users')\n      .doc(userId)\n      .collection('entries');\n\n    // Listen to changes in the collection and update the entries state\n    const unsubscribe = entriesRef.onSnapshot(({ docs }) => {\n      setEntries(docs.map(toEntry));\n      setLoading(false);\n    });\n\n    return unsubscribe; // Cleanup the listener when the component unmounts\n\n  }, [userId]);\n\n  const events = entries.map((entry) => ({\n    title: entry.title,\n    date: new Date(entry.date),\n    id: entry.id,\n    classNames: entry.completed ? 'completed' : 'not-completed' // add classNames based on completion status\n  }));\n\n  const eventRender = (info: any) => {\n    if (info.event.extendedProps.completed) {\n      info.el.style.backgroundColor = 'blue'; // set blue background for completed tasks\n    } else {\n      info.el.style.backgroundColor = 'green'; // set green background for incomplete tasks\n    }\n  };\n\n  const handleEventClick = ({ event }: { event: any }) => {\n    history.push(`/my/entries/view/${event.id}`); // redirect to the corresponding entry page\n  };\n\n  const handleDateClick = (arg: any) => {\n    // filter the entries by the selected date and display them\n    const selectedEntries = entries.filter((entry) => {\n      const entryDate = new Date(entry.date);\n      return (\n        entryDate.getFullYear() === arg.date.getFullYear() &&\n        entryDate.getMonth() === arg.date.getMonth() &&\n        entryDate.getDate() === arg.date.getDate()\n      );\n    });\n    console.log(selectedEntries);\n  };\n\n  return (\n    <CalendarContainer>\n      {!loading && (\n        <FullCalendar\n          plugins={[dayGridPlugin]}\n          initialView=\"dayGridMonth\"\n          events={events}\n          eventClick={handleEventClick}\n          dateClick={handleDateClick} // attach the date click handler\n          lazyFetching={true}\n          height=\"500px\"\n          eventRender={eventRender}\n        />\n      )}\n    </CalendarContainer>\n  );\n};\n\nexport default Calendar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}